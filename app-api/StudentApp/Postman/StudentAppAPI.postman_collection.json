{
	"info": {
		"_postman_id": "3e6b85c1-62e3-49e2-93e8-da0c64f5296b",
		"name": "StudentAppAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Pre",
					"item": [
						{
							"name": "Clear environment variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear()"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/subject/types",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"subject",
										"types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    console.log(request)\r",
													"    pm.environment.set('createdUserKey', request.user.userKey)\r",
													"\r",
													"    const jsonData = JSON.parse(responseBody)\r",
													"    pm.environment.set('authToken', jsonData.token)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"user\": {\r\n    \"userKey\": \"{{$guid}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"loginName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"emailAddress\": \"{{$randomEmail}}\",\r\n    \"semesterValue\": \"{{$randomInt}}\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/user/register",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/user/{{createdUserKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"user",
												"{{createdUserKey}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Semester",
							"item": [
								{
									"name": "Add Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.environment.set('createdSemesterKey', jsonData)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"randomSemesterValue\", Math.floor(Math.random()*10) + 2)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/{{randomSemesterValue}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"{{randomSemesterValue}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/single/{{createdSemesterKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"single",
												"{{createdSemesterKey}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Subject",
							"item": [
								{
									"name": "Get current Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedSemesterKey\", keys[0])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/current",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"current"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Subject Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedSubjectType\", keys[0])\r",
													"})\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/types",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Subject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    console.log(request)\r",
													"    pm.environment.set('createdSubjectKey', request.subject.subjectKey)\r",
													"\r",
													"})\r",
													"\r",
													"\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"subject\": {\r\n    \"subjectKey\": \"{{$guid}}\",\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomLoremSentences}}\",\r\n    \"typeDefinitionKey\": \"{{selectedSubjectType}}\",\r\n    \"hasProjectToPass\": {{$randomBoolean}},\r\n    \"semesterDefinitionKey\": \"{{selectedSemesterKey}}\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/subject",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created Subject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/{{createdSubjectKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"{{createdSubjectKey}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Get current Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedSemesterKey\", keys[0])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/current",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"current"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Project Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedProjectType\", keys[0])\r",
													"})\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/project/types",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"project",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Subjects by Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const randIndex = Math.floor(Math.random() * jsonData.length)\r",
													"    const key = jsonData[randIndex].subjectKey\r",
													"\r",
													"    pm.environment.set(\"selectedSubjectKey\", key)\r",
													"})\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/semester",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"semester"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    console.log(request)\r",
													"    pm.environment.set('createdCategoryKey', request.category.categoryKey)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"category\": {\r\n    \"categoryKey\": \"{{$guid}}\",\r\n    \"projectTypeKey\": \"00000000-0000-0000-0000-000000000012\",\r\n    \"userKey\": \"{{$currentUserKey}}\",\r\n    \"categoryName\": \"{{$randomNoun}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/project/category",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"project",
												"category"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Project Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"const randIndex = Math.floor(Math.random() * jsonData.length)\r",
													"const key = jsonData[randIndex].categoryKey\r",
													"\r",
													"pm.environment.set(\"randomSelectedCategory\", key)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/project/categories/{{selectedProjectType}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"project",
												"categories",
												"{{selectedProjectType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"necessaryToPassRand\", Boolean(Math.floor(Math.random())))\r",
													"\r",
													"pm.environment.set('currentdate', new Date().toISOString());\r",
													"//console.log(new Date().toISOString())\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    console.log(request)\r",
													"    pm.environment.set('createdProjectKey', request.project.projectKey)\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"date\": \"{{currentdate}}\",\r\n  \"project\": {\r\n    \"projectKey\": \"{{$guid}}\",\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"typeDefinitionKey\": \"{{selectedProjectType}}\",\r\n    \"description\": \"{{$randomLoremSentences}}\",\r\n    \"deadlineTime\":\"2021-01-04T14:46:52.915Z\",\r\n    \"necessaryToPass\": {{necessaryToPassRand}},\r\n    \"categoryKey\": \"{{createdCategoryKey}}\",\r\n    \"subjectKey\": \"{{selectedSubjectKey}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/project",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created Project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/project/{{createdProjectKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"project",
												"{{createdProjectKey}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Event",
							"item": [
								{
									"name": "Get current Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedSemesterKey\", keys[0])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/current",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"current"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Subjects by Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const randIndex = Math.floor(Math.random() * jsonData.length)\r",
													"    const key = jsonData[randIndex].subjectKey\r",
													"\r",
													"    pm.environment.set(\"selectedSubjectKey\", key)\r",
													"})\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/semester",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"semester"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Project by Subject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    const randIndex = Math.floor(Math.random() * keys.length)\r",
													"    pm.environment.set(\"selectedProjectKey\", jsonData[randIndex].projectKey)\r",
													"})\r",
													"\r",
													"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/project/subject/{{selectedSubjectKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"project",
												"subject",
												"{{selectedSubjectKey}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    pm.environment.set('createdEventKey', request.event.eventKey)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"event\": {\r\n    \"eventKey\": \"{{$guid}}\",\r\n    \"title\": \"{{$randomDepartment}}\",\r\n    \"content\": \"{{$randomLoremSentences}}\",\r\n    \"projectKey\": \"{{selectedProjectKey}}\",\r\n    \"setTime\":\"2021-03-02T14:46:52.915Z\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/event",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"event"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/event/{{createdEventKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"event",
												"{{createdEventKey}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    console.log(request)\r",
													"    pm.environment.set('createdUserKey', request.user.userKey)\r",
													"\r",
													"    const jsonData = JSON.parse(responseBody)\r",
													"    pm.environment.set('authToken', jsonData.token)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"user\": {\r\n    \"userKey\": \"{{$guid}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"loginName\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"emailAddress\": \"{{$randomEmail}}\",\r\n    \"semesterValue\": \"1\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/user/register",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/user/{{createdUserKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"user",
												"{{createdUserKey}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Semester",
							"item": [
								{
									"name": "Get current Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"firstUserSemesterKey\", keys[0])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/current",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"current"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.environment.set('createdSemesterKey', jsonData)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/11",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"11"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/single/{{createdSemesterKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"single",
												"{{createdSemesterKey}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/{{firstUserSemesterKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"{{firstUserSemesterKey}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get changed Semester",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"currentSemesterKey\", keys[0])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/semester/current",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"semester",
												"current"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Subject",
							"item": [
								{
									"name": "Get Subject Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedSubjectType\", keys[0])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/types",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Subject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"    const request = JSON.parse(pm.request.body.raw)\r",
													"    console.log(request)\r",
													"    pm.environment.set('createdSubjectKey', request.subject.subjectKey)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"subject\": {\r\n    \"subjectKey\": \"{{$guid}}\",\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomLoremSentences}}\",\r\n    \"typeDefinitionKey\": \"{{selectedSubjectType}}\",\r\n    \"hasProjectToPass\": {{$randomBoolean}},\r\n    \"semesterDefinitionKey\": \"{{currentSemesterKey}}\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/subject",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created Subject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/{{createdSubjectKey}}",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"{{createdSubjectKey}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get another Subject Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})\r",
													"\r",
													"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const keys = Object.keys(jsonData)\r",
													"\r",
													"    keys.forEach(key =>{\r",
													"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
													"        pm.expect(key).to.be.a('string') //check key\r",
													"\r",
													"        pm.expect(key).to.have.lengthOf(36)\r",
													"    })\r",
													"    \r",
													"    pm.environment.set(\"selectedSubjectType\", keys[1])\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiURL}}/subject/types",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subject",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set('currentdate', new Date().toISOString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"subject\": {\r\n    \"subjectKey\": \"{{createdSubjectKey}}\",\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"Nowy opis przedmiotu po update\",\r\n    \"isPassed\": true,\r\n    \"typeDefinitionKey\": \"{{selectedSubjectType}}\",\r\n    \"hasProjectToPass\": {{$randomBoolean}},\r\n    \"semesterDefinitionKey\": \"{{currentSemesterKey}}\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{ApiURL}}/subject",
											"host": [
												"{{ApiURL}}"
											],
											"path": [
												"subject"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Others",
			"item": [
				{
					"name": "Subject",
					"item": [
						{
							"name": "Get by Semester",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/subject/semester",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"subject",
										"semester"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Count",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/subject/count",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"subject",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single Subject",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/subject/8F3B0342-67B0-49DC-9CB7-052568407A7E",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"subject",
										"8F3B0342-67B0-49DC-9CB7-052568407A7E"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Subject",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-02-07T14:46:52.915Z\",\r\n  \"subject\": {\r\n    \"subjectKey\": \"8F3B0342-67B0-49DC-9CB7-052568407A7E\",\r\n    \"name\": \"\",\r\n    \"description\": \"Programowanie w C#, bardzo fajny przedmiot\",\r\n    \"isPassed\": true,\r\n    \"typeDefinitionKey\": \"00000000-0000-0000-0000-000000000021\",\r\n    \"hasProjectToPass\": false,\r\n    \"semesterDefinitionKey\": \"C7EFFBB1-77C8-4B99-824E-D3DCD985C8C8\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/subject",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"subject"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Project",
					"item": [
						{
							"name": "Get by Subject",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/subject/8A20F12D-0F4B-44C3-AFF5-2C857DE17E26",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"subject",
										"8A20F12D-0F4B-44C3-AFF5-2C857DE17E26"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Project Statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const keys = Object.keys(jsonData)\r",
											"\r",
											"    keys.forEach(key =>{\r",
											"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
											"        pm.expect(key).to.be.a('string') //check key\r",
											"\r",
											"        pm.expect(key).to.have.lengthOf(36)\r",
											"    })\r",
											"    \r",
											"    pm.environment.set(\"selectedStatus\", keys[0])\r",
											"})\r",
											"\r",
											"//https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#asserting-a-value-type"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/statuses",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Count",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/count",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Semester",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/semester",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"semester"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by Day",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/day/10",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"day",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single Subject",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/2DB900CF-39FA-426D-A430-05090CCBE40F",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"2DB900CF-39FA-426D-A430-05090CCBE40F"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('currentdate', new Date().toISOString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"{{currentdate}}\",\r\n  \"project\": {\r\n    \"projectKey\": \"87a04ee6-f8f0-414e-8514-2bee6ab2e79e\",\r\n    \"name\": \"Test edycji projektu\",\r\n    \"typeDefinitionKey\": \"00000000-0000-0000-0000-000000000022\",\r\n    \"description\": \"\",\r\n    \"deadlineTime\":\"2021-02-10T14:46:52.915Z\",\r\n    \"necessaryToPass\": true,\r\n    \"projectStatusKey\": \"00000000-0000-0000-0000-000000000002\",\r\n    \"categoryKey\": \"00000000-0000-0000-0000-000000000002\",\r\n    \"subjectKey\": \"5903b5c7-4b01-44fe-b969-8a275c4f7224\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/project",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Event",
					"item": [
						{
							"name": "Get by Day",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/event/day",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"event",
										"day"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Semester",
					"item": [
						{
							"name": "Get all User Semesters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test(\"Odpowiedź jest w prawidłowej formie\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const keys = Object.keys(jsonData)\r",
											"\r",
											"    keys.forEach(key =>{\r",
											"        pm.expect(jsonData[key]).to.be.a('string') //check value\r",
											"        pm.expect(key).to.be.a('string') //check key\r",
											"\r",
											"        pm.expect(key).to.have.lengthOf(36)\r",
											"    })\r",
											"    \r",
											"    pm.environment.set(\"selectedSemesterKey\", keys[0])\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/semester",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"semester"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Semester",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/semester/c7effbb1-77c8-4b99-824e-d3dcd985c8c8",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"semester",
										"c7effbb1-77c8-4b99-824e-d3dcd985c8c8"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current Semester",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/semester/current",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"semester",
										"current"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Get all Users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/user/all",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"user",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get logged User",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/user/current",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"user",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
											"    pm.response.to.have.status(200)\r",
											"\r",
											"    const jsonData = JSON.parse(responseBody)\r",
											"    pm.environment.set('authToken', jsonData.token)\r",
											"    pm.environment.set('currentUserKey', jsonData.userKey)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"loginName\": \"admin\",\r\n  \"password\": \"cyberbug2021\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/user/authenticate",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"user",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get Project Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const randIndex = Math.floor(Math.random() * jsonData.length)\r",
											"const key = jsonData[randIndex].categoryKey\r",
											"\r",
											"pm.environment.set(\"randomSelectedCategory\", key)\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/project/categories/{{selectedProjectType}}",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"categories",
										"{{selectedProjectType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Kod odpowiedzi jest prawidłowy - 200 OK', () => {  \r",
											"    pm.response.to.have.status(200)\r",
											"\r",
											"    const request = JSON.parse(pm.request.body.raw)\r",
											"    console.log(request)\r",
											"    pm.environment.set('createdCategoryKey', request.category.categoryKey)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"date\": \"2021-02-01T14:46:52.915Z\",\r\n  \"category\": {\r\n    \"categoryKey\": \"{{$guid}}\",\r\n    \"projectTypeKey\": \"00000000-0000-0000-0000-000000000012\",\r\n    \"userKey\": \"{{$currentUserKey}}\",\r\n    \"categoryName\": \"Średnia kartkówka\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ApiURL}}/project/category",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ApiURL}}/project/category/eba968a6-189e-405c-8e67-e2e342d336f1",
									"host": [
										"{{ApiURL}}"
									],
									"path": [
										"project",
										"category",
										"eba968a6-189e-405c-8e67-e2e342d336f1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ApiURL",
			"value": "https://localhost:44310/api"
		}
	]
}