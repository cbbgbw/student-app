// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentApp.Tools.Configurations;

namespace StudentApp.API.Migrations.SQLServerMigrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210206143926_0.0.2-06.02.2021-InsertEmptyGuids_CategoryDataChanges")]
    partial class _00206022021InsertEmptyGuids_CategoryDataChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("StudentApp.Services.Model.Category", b =>
                {
                    b.Property<Guid>("CategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectTypeKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryKey");

                    b.HasIndex("UserKey");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryKey = new Guid("00000000-0000-0000-0000-000000000001"),
                            CategoryName = "Odpowiedź ustna",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderIndex = 1,
                            ProjectTypeKey = new Guid("00000000-0000-0000-0000-000000000022"),
                            UserKey = new Guid("00000000-0000-0000-0000-ffffffffffff")
                        },
                        new
                        {
                            CategoryKey = new Guid("00000000-0000-0000-0000-000000000002"),
                            CategoryName = "Kartkówka",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderIndex = 2,
                            ProjectTypeKey = new Guid("00000000-0000-0000-0000-000000000022"),
                            UserKey = new Guid("00000000-0000-0000-0000-ffffffffffff")
                        },
                        new
                        {
                            CategoryKey = new Guid("00000000-0000-0000-0000-000000000003"),
                            CategoryName = "Projekt zespołowy",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderIndex = 1,
                            ProjectTypeKey = new Guid("00000000-0000-0000-0000-000000000012"),
                            UserKey = new Guid("00000000-0000-0000-0000-ffffffffffff")
                        },
                        new
                        {
                            CategoryKey = new Guid("00000000-0000-0000-0000-000000000004"),
                            CategoryName = "Projekt zaliczeniowy",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderIndex = 2,
                            ProjectTypeKey = new Guid("00000000-0000-0000-0000-000000000012"),
                            UserKey = new Guid("00000000-0000-0000-0000-ffffffffffff")
                        });
                });

            modelBuilder.Entity("StudentApp.Services.Model.Definition", b =>
                {
                    b.Property<Guid>("DefinitionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<Guid>("DefinitionGroupKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DefinitionKey");

                    b.HasIndex("DefinitionGroupKey");

                    b.ToTable("Definition");

                    b.HasData(
                        new
                        {
                            DefinitionKey = new Guid("00000000-0000-0000-0000-ffffffffffff"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("00000000-0000-0000-ffff-ffffffffffff"),
                            GroupName = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = ""
                        },
                        new
                        {
                            DefinitionKey = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("00000000-0000-0000-0000-000000000001"),
                            GroupName = "SUBJECT_TYPES",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "Laboratoria"
                        },
                        new
                        {
                            DefinitionKey = new Guid("00000000-0000-0000-0000-000000000021"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("00000000-0000-0000-0000-000000000001"),
                            GroupName = "SUBJECT_TYPES",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "Wykład"
                        },
                        new
                        {
                            DefinitionKey = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("00000000-0000-0000-0000-000000000002"),
                            GroupName = "PROJECT_TYPES",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "Projekt"
                        },
                        new
                        {
                            DefinitionKey = new Guid("00000000-0000-0000-0000-000000000022"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("00000000-0000-0000-0000-000000000002"),
                            GroupName = "PROJECT_TYPES",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "Egzamin"
                        },
                        new
                        {
                            DefinitionKey = new Guid("c7effbb1-77c8-4b99-824e-d3dcd985c8c8"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = true,
                            DefinitionGroupKey = new Guid("bdfc4999-ea15-4aef-816f-df1d0ab501ee"),
                            GroupName = "admin_SEMESTERS",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "1"
                        },
                        new
                        {
                            DefinitionKey = new Guid("9f7116df-ae43-49e9-9144-99a299e38fd5"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("bdfc4999-ea15-4aef-816f-df1d0ab501ee"),
                            GroupName = "admin_SEMESTERS",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "2"
                        },
                        new
                        {
                            DefinitionKey = new Guid("5331b1c1-3bdb-4a06-8150-c3eb56a5364f"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            DefinitionGroupKey = new Guid("bdfc4999-ea15-4aef-816f-df1d0ab501ee"),
                            GroupName = "admin_SEMESTERS",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "3"
                        });
                });

            modelBuilder.Entity("StudentApp.Services.Model.DefinitionGroup", b =>
                {
                    b.Property<Guid>("DefinitionGroupKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DefinitionGroupKey");

                    b.ToTable("DefinitionGroup");

                    b.HasData(
                        new
                        {
                            DefinitionGroupKey = new Guid("00000000-0000-0000-ffff-ffffffffffff"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            GroupName = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DefinitionGroupKey = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Typ zajęć",
                            GroupName = "SUBJECT_TYPES",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DefinitionGroupKey = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Typ projektu",
                            GroupName = "PROJECT_TYPES",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DefinitionGroupKey = new Guid("bdfc4999-ea15-4aef-816f-df1d0ab501ee"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Semestr użytkownika admin",
                            GroupName = "admin_SEMESTERS",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DefinitionGroupKey = new Guid("ce1c4999-ea15-4aef-816f-df1d0ab501ee"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Semestr użytkownika admin-front",
                            GroupName = "admin-front_SEMESTERS",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentApp.Services.Model.Event", b =>
                {
                    b.Property<Guid>("EventKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SetTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventKey");

                    b.HasIndex("ProjectKey");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Project", b =>
                {
                    b.Property<Guid>("ProjectKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadlineTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NecessaryToPass")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectStatusKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000001"));

                    b.Property<Guid>("SubjectKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeDefinitionKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkingAreaKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectKey");

                    b.HasIndex("CategoryKey");

                    b.HasIndex("ProjectStatusKey");

                    b.HasIndex("SubjectKey");

                    b.HasIndex("TypeDefinitionKey");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Status", b =>
                {
                    b.Property<Guid>("StatusKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("StatusKey");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusKey = new Guid("00000000-0000-0000-0000-000000000001"),
                            Color = "ffffff",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nowy",
                            Type = 0
                        },
                        new
                        {
                            StatusKey = new Guid("00000000-0000-0000-0000-000000000002"),
                            Color = "ffffff",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Otwarty",
                            Type = 1
                        },
                        new
                        {
                            StatusKey = new Guid("00000000-0000-0000-0000-000000000003"),
                            Color = "ffffff",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "W trakcie",
                            Type = 2
                        },
                        new
                        {
                            StatusKey = new Guid("00000000-0000-0000-0000-000000000004"),
                            Color = "ffffff",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wstrzymany",
                            Type = 3
                        },
                        new
                        {
                            StatusKey = new Guid("00000000-0000-0000-0000-000000000005"),
                            Color = "ffffff",
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zakończony",
                            Type = 4
                        });
                });

            modelBuilder.Entity("StudentApp.Services.Model.Subject", b =>
                {
                    b.Property<Guid>("SubjectKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasProjectToPass")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SemesterDefinitionKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeDefinitionKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectKey");

                    b.HasIndex("SemesterDefinitionKey");

                    b.HasIndex("TypeDefinitionKey");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("StudentApp.Services.Model.User", b =>
                {
                    b.Property<Guid>("UserKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SemesterDefinitionGroupKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserKey");

                    b.HasIndex("SemesterDefinitionGroupKey")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserKey = new Guid("00000000-0000-0000-0000-ffffffffffff"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "",
                            FirstName = "",
                            LastName = "",
                            LoginName = "",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = new byte[] { 14, 46, 74, 230, 66, 229, 109, 33, 158, 97, 152, 81, 69, 76, 205, 85, 70, 125, 57, 178, 39, 162, 152, 169, 113, 70, 53, 60, 72, 66, 118, 228, 41, 30, 7, 224, 162, 120, 66, 116, 143, 152, 170, 184, 27, 9, 107, 63, 150, 130, 185, 90, 251, 53, 163, 133, 207, 238, 242, 200, 38, 166, 19, 67 },
                            PasswordSalt = new byte[] { 83, 57, 228, 12, 190, 246, 80, 208, 26, 7, 244, 88, 175, 138, 31, 126, 158, 252, 126, 84, 116, 44, 57, 71, 193, 6, 216, 214, 212, 218, 189, 185, 13, 106, 242, 173, 253, 152, 75, 137, 234, 142, 109, 80, 140, 150, 190, 57, 91, 254, 36, 240, 63, 234, 31, 82, 80, 25, 102, 50, 234, 192, 125, 85, 189, 22, 38, 82, 185, 178, 110, 48, 56, 54, 100, 66, 35, 33, 186, 89, 148, 193, 59, 221, 143, 240, 156, 78, 45, 127, 207, 24, 170, 189, 7, 14, 217, 62, 241, 40, 79, 216, 95, 104, 57, 102, 160, 16, 109, 179, 222, 219, 134, 243, 58, 173, 190, 95, 152, 31, 167, 227, 90, 125, 45, 66, 255, 147 },
                            SemesterDefinitionGroupKey = new Guid("00000000-0000-0000-ffff-ffffffffffff")
                        },
                        new
                        {
                            UserKey = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "",
                            FirstName = "admin",
                            LastName = "",
                            LoginName = "admin",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = new byte[] { 6, 81, 65, 91, 168, 254, 104, 72, 191, 225, 114, 101, 84, 34, 232, 133, 241, 217, 205, 201, 1, 138, 242, 57, 176, 100, 98, 10, 175, 160, 131, 21, 114, 140, 24, 64, 76, 67, 155, 3, 43, 53, 94, 6, 115, 217, 167, 154, 211, 145, 70, 97, 120, 205, 67, 22, 68, 109, 206, 7, 85, 94, 53, 137 },
                            PasswordSalt = new byte[] { 73, 197, 226, 246, 109, 249, 107, 141, 22, 196, 140, 219, 232, 0, 163, 117, 172, 169, 31, 228, 66, 6, 211, 44, 215, 204, 27, 31, 119, 22, 51, 246, 246, 113, 145, 226, 179, 81, 222, 29, 202, 128, 189, 86, 107, 118, 244, 171, 10, 174, 185, 178, 144, 196, 52, 197, 233, 177, 66, 140, 9, 240, 234, 19, 246, 225, 96, 230, 32, 196, 3, 133, 108, 130, 146, 200, 247, 162, 92, 190, 70, 105, 174, 128, 25, 135, 50, 70, 37, 13, 65, 72, 242, 17, 199, 202, 94, 146, 67, 99, 9, 202, 31, 48, 91, 105, 223, 75, 86, 145, 172, 163, 109, 147, 80, 72, 108, 26, 185, 199, 73, 183, 57, 234, 158, 5, 152, 148 },
                            SemesterDefinitionGroupKey = new Guid("bdfc4999-ea15-4aef-816f-df1d0ab501ee")
                        },
                        new
                        {
                            UserKey = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreateTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "",
                            FirstName = "admin-front",
                            LastName = "",
                            LoginName = "admin-front",
                            ModifyTime = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = new byte[] { 6, 81, 65, 91, 168, 254, 104, 72, 191, 225, 114, 101, 84, 34, 232, 133, 241, 217, 205, 201, 1, 138, 242, 57, 176, 100, 98, 10, 175, 160, 131, 21, 114, 140, 24, 64, 76, 67, 155, 3, 43, 53, 94, 6, 115, 217, 167, 154, 211, 145, 70, 97, 120, 205, 67, 22, 68, 109, 206, 7, 85, 94, 53, 137 },
                            PasswordSalt = new byte[] { 73, 197, 226, 246, 109, 249, 107, 141, 22, 196, 140, 219, 232, 0, 163, 117, 172, 169, 31, 228, 66, 6, 211, 44, 215, 204, 27, 31, 119, 22, 51, 246, 246, 113, 145, 226, 179, 81, 222, 29, 202, 128, 189, 86, 107, 118, 244, 171, 10, 174, 185, 178, 144, 196, 52, 197, 233, 177, 66, 140, 9, 240, 234, 19, 246, 225, 96, 230, 32, 196, 3, 133, 108, 130, 146, 200, 247, 162, 92, 190, 70, 105, 174, 128, 25, 135, 50, 70, 37, 13, 65, 72, 242, 17, 199, 202, 94, 146, 67, 99, 9, 202, 31, 48, 91, 105, 223, 75, 86, 145, 172, 163, 109, 147, 80, 72, 108, 26, 185, 199, 73, 183, 57, 234, 158, 5, 152, 148 },
                            SemesterDefinitionGroupKey = new Guid("ce1c4999-ea15-4aef-816f-df1d0ab501ee")
                        });
                });

            modelBuilder.Entity("StudentApp.Services.Model.Category", b =>
                {
                    b.HasOne("StudentApp.Services.Model.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Definition", b =>
                {
                    b.HasOne("StudentApp.Services.Model.DefinitionGroup", "DefinitionGroup")
                        .WithMany("Definitions")
                        .HasForeignKey("DefinitionGroupKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DefinitionGroup");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Event", b =>
                {
                    b.HasOne("StudentApp.Services.Model.Project", "Project")
                        .WithMany("ProjectEvents")
                        .HasForeignKey("ProjectKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Project", b =>
                {
                    b.HasOne("StudentApp.Services.Model.Category", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("StudentApp.Services.Model.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("StudentApp.Services.Model.Subject", "Subject")
                        .WithMany("Projects")
                        .HasForeignKey("SubjectKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("StudentApp.Services.Model.Definition", "DefinitionType")
                        .WithMany("ProjectStatusDefinitions")
                        .HasForeignKey("TypeDefinitionKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DefinitionType");

                    b.Navigation("Status");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Subject", b =>
                {
                    b.HasOne("StudentApp.Services.Model.Definition", "SemesterDefinition")
                        .WithMany("SubjectSemesterDefinitions")
                        .HasForeignKey("SemesterDefinitionKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("StudentApp.Services.Model.Definition", "StatusDefinition")
                        .WithMany("SubjectStatusDefinitions")
                        .HasForeignKey("TypeDefinitionKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("SemesterDefinition");

                    b.Navigation("StatusDefinition");
                });

            modelBuilder.Entity("StudentApp.Services.Model.User", b =>
                {
                    b.HasOne("StudentApp.Services.Model.DefinitionGroup", "SemesterDefinitionGroup")
                        .WithOne("UserSemesterDefinitionGroup")
                        .HasForeignKey("StudentApp.Services.Model.User", "SemesterDefinitionGroupKey")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("SemesterDefinitionGroup");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Category", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Definition", b =>
                {
                    b.Navigation("ProjectStatusDefinitions");

                    b.Navigation("SubjectSemesterDefinitions");

                    b.Navigation("SubjectStatusDefinitions");
                });

            modelBuilder.Entity("StudentApp.Services.Model.DefinitionGroup", b =>
                {
                    b.Navigation("Definitions");

                    b.Navigation("UserSemesterDefinitionGroup");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Project", b =>
                {
                    b.Navigation("ProjectEvents");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Status", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudentApp.Services.Model.Subject", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudentApp.Services.Model.User", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
